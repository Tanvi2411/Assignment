import requests
from typing import List, Optional, Dict
from pydantic import BaseModel, Field

# SerpAPI Key and endpoint setup
SERPAPI_API_KEY = '5cc1af4ce4a51962a95d1e828cebc62689283f843e569f97cfe278ececedfb1f'  
SERPAPI_URL = "https://serpapi.com/search"

# --- Web Search Utility using SerpAPI ---

def search_web(query: str, num_results: int = 5):
    print(f"Searching the web for query: '{query}' ...")
    
   
    params = {
        "q": query,
        "api_key": SERPAPI_API_KEY,  
        "num": num_results
    }
    
   
    response = requests.get(SERPAPI_URL, params=params)
    
    if response.status_code == 200:
        data = response.json()
        search_results = []
        
        for idx, result in enumerate(data.get("organic_results", []), 1):
            search_results.append({
                "title": result.get("title", f"Result {idx}"),
                "url": result.get("link", ""),
                "content": result.get("snippet", f"This is a snippet from result {idx}.")
            })
        
        return search_results
    else:
        print("Error fetching search results")
        return []


def researcher_agent(state):
    query = state.query
    print(f"[Researcher Agent] Searching for: {query}")
    research_data = search_web(query)
    state.research_data = research_data
    return state  



def drafter_agent(state):
    research_data = state.research_data
    print("[Drafter Agent] Drafting answer based on research data...")

    if not research_data:
        state.draft_answer = "No sufficient data found to generate an answer."
    else:
        summary = "Here is the research summary based on the gathered sources:\n\n"
        for idx, item in enumerate(research_data, 1):
            summary += f"{idx}. {item['title']} - {item['url']}\n"
            summary += f"Snippet: {item['content']}\n\n"
        state.draft_answer = summary  
    return state  


class ResearchState(BaseModel):
    query: str
    research_data: Optional[List[Dict]] = Field(default=None)
    draft_answer: Optional[str] = Field(default=None)


def main():
    query = input("Enter your research query: ")

   
    initial_state = ResearchState(query=query)

    
    state_after_research = researcher_agent(initial_state)

    final_state = drafter_agent(state_after_research)

    print("\n\n=== Final Drafted Answer ===")
    print(final_state.draft_answer)

if __name__ == "__main__":
    main()
